angular.module 'leapApp'

.factory 'Topic', ($http,$rootScope,$q,$log) ->
  topic = false
  urlBase = ->
    (switch topic.topic_type
      when "person" then "/people/"
      when "course" then "/courses/"
    ) + topic.mis_id
  urlBase: urlBase
  set: (mis_id = "user", type = "person") ->
    deferred = $q.defer()
    if topic && topic.mis_id == mis_id && topic.topic_type == type
      deferred.resolve topic
    else
      $http.get("/#{if type == 'person' then 'people' else 'courses'}/#{mis_id}.json").then (result) ->
        topic = result.data
        $rootScope.$broadcast("topicChanged")
        deferred.resolve topic
    deferred.promise
  reset: ->
    topic = false
    $rootScope.$broadcast("topicChanged")
  get: -> topic
  update: ->
    return unless topic
    $log.info "TopicFactory: I'm about to update the topic"
    $http.get(urlBase() + ".json?refresh=true")
    .success (data) ->
      topic = data
      $rootScope.$broadcast("topicUpdated")

.factory 'Timeline', ($http,$rootScope,$q,Topic,$log,academicYearFilter) ->
    events = []
    registers = null
    viewName = null
    view = null
    date = null
    setView: (v) ->
      date = null
      if viewName != v
        viewName = v
        $rootScope.$broadcast "viewChanged"
    getView: -> view
    setDate: (d) -> date = moment(d).utc()
    getDate: -> date
    get: -> events
    registers: -> registers
    years: -> _.map(_.uniq(_.map(events,(e) -> academicYearFilter(e.event_date))), (y) -> {year: y,show: true})
    update: ->
      deferred = $q.defer()
      $http.get("#{Topic.urlBase()}/timeline_views/#{viewName}#{if date then '?date=' + date.toISOString() else ''}").success (data) ->
        unless date
          if data.view.view_type == "timetable"
            date = moment()
          else
            date = moment().add(1,"month")
        view = data.view
        events = data.events
        if data.registers
          registers = data.registers
          for register in registers
            register.timetableDay = new Date(register.timetable_start).getDay()
        for event,i in events
          event.eventDate = new Date event.event_date
          event.timetableDay = event.eventDate.getDay()
          event.academicYear = academicYearFilter(event.eventDate)
          event.showDate = (events[i-1]?.eventDate.toDateString() != event.eventDate.toDateString())
        endDate = _.last(events).eventDate if events.length > 1
        $rootScope.$broadcast("timelineUpdated")
        deferred.resolve events
      deferred.promise

.factory 'Categories', ->
  categories = []
  <% Category.all.each do |c| %>
  categories[<%= c.id %>] = <%= c.to_json(methods: :styles) %>
  <% end %>
  getAll: -> _.filter(categories, (e) -> e?)
  get: (id) -> categories[id]

.factory 'LeapEvent', ($http,Topic,$q,Categories) ->
  event = category = false
  load: (eventId) ->
    deferred = $q.defer()
    $http.get("#{Topic.urlBase()}/events/#{eventId}.json").success (data) ->
      event = data
      category = Categories.get(event.categoryId)
      event.eventDate = new Date(event.eventDate)
      event.showTime = !(event.eventDate.getHours() == event.eventDate.getMinutes() == event.eventDate.getSeconds() == 0)
      event.showPerson = Topic.get().topic_type != "person"
      deferred.resolve event
    deferred.promise
  get: -> event
  category: -> category
